//fcfs-
#include <stdio.h>

int main() {
    int n, i;
    int arrival[10], burst[10], waiting[10], turnaround[10], completion[10];
    float avg_wait = 0, avg_turnaround = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter Arrival Time and Burst Time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d %d", &arrival[i], &burst[i]);
    }

    // Calculate completion time
    completion[0] = arrival[0] + burst[0];
    for (i = 1; i < n; i++) {
        if (arrival[i] > completion[i - 1])
            completion[i] = arrival[i] + burst[i];
        else
            completion[i] = completion[i - 1] + burst[i];
    }

    for (i = 0; i < n; i++) {
        turnaround[i] = completion[i] - arrival[i];
        waiting[i] = turnaround[i] - burst[i];
        avg_wait += waiting[i];
        avg_turnaround += turnaround[i];
    }

    printf("\nProcess\tArrival\tBurst\tWaiting\tTurnaround\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", i + 1, arrival[i], burst[i], waiting[i], turnaround[i]);
    }

    avg_wait /= n;
    avg_turnaround /= n;

    printf("\nAverage Waiting Time: %.2f\n", avg_wait);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround);

    return 0;
}

o/p-
Enter the number of processes: 3
Enter Arrival Time and Burst Time for each process:
Process 1: 0 4
Process 2: 1 3
Process 3: 2 1

//sjf
#include <stdio.h>

int main() {
    int n, i, j, temp;
    int burst[10], process[10], waiting[10], turnaround[10];
    float avg_wait = 0, avg_turnaround = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter Burst Time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &burst[i]);
        process[i] = i + 1; // Process numbering
    }

    // Sort based on Burst Time (SJF)
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (burst[i] > burst[j]) {
                temp = burst[i];
                burst[i] = burst[j];
                burst[j] = temp;

                temp = process[i];
                process[i] = process[j];
                process[j] = temp;
            }
        }
    }

    waiting[0] = 0;
    for (i = 1; i < n; i++) {
        waiting[i] = waiting[i - 1] + burst[i - 1];
    }

    for (i = 0; i < n; i++) {
        turnaround[i] = waiting[i] + burst[i];
        avg_wait += waiting[i];
        avg_turnaround += turnaround[i];
    }

    printf("\nProcess\tBurst\tWaiting\tTurnaround\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\n", process[i], burst[i], waiting[i], turnaround[i]);
    }

    avg_wait /= n;
    avg_turnaround /= n;

    printf("\nAverage Waiting Time: %.2f\n", avg_wait);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround);

    return 0;
}

o/p-
Enter the number of processes: 4
Enter Burst Time for each process:
Process 1: 6
Process 2: 8
Process 3: 7
Process 4: 3
