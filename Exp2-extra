//program grep command-
#include <stdio.h>
#include <string.h>

int main() {
    char filename[100], pattern[100], line[1000];

    printf("Enter the filename: ");
    scanf("%s", filename);

    printf("Enter the pattern to search: ");
    scanf("%s", pattern);

    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("Could not open file %s\n", filename);
        return 1;
    }

    printf("\nLines containing \"%s\":\n", pattern);
    while (fgets(line, sizeof(line), fp)) {
        if (strstr(line, pattern)) {
            printf("%s", line);
        }
    }

    fclose(fp);
    return 0;
}


//program awk command
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main() {
    char filename[100], line[1000];
    int field1, field2;

    printf("Enter the filename: ");
    scanf("%s", filename);

    printf("Enter two column numbers to print (e.g., 1 3): ");
    scanf("%d %d", &field1, &field2);

    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("Could not open file %s\n", filename);
        return 1;
    }

    printf("\nSelected Columns:\n");
    while (fgets(line, sizeof(line), fp)) {
        char *token;
        int col = 1;
        token = strtok(line, " \t\n");

        while (token != NULL) {
            if (col == field1 || col == field2) {
                printf("%s ", token);
            }
            token = strtok(NULL, " \t\n");
            col++;
        }
        printf("\n");
    }

    fclose(fp);
    return 0;
}

//program sort command
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LINES 100
#define MAX_LEN 100

int main() {
    char filename[100], *lines[MAX_LINES];
    char buffer[MAX_LEN];
    int count = 0;

    printf("Enter the filename: ");
    scanf("%s", filename);

    FILE *fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("Could not open file %s\n", filename);
        return 1;
    }

    while (fgets(buffer, MAX_LEN, fp)) {
        lines[count] = malloc(strlen(buffer) + 1);
        strcpy(lines[count], buffer);
        count++;
    }
    fclose(fp);

    // Sort lines (bubble sort for simplicity)
    for (int i = 0; i < count - 1; i++) {
        for (int j = i + 1; j < count; j++) {
            if (strcmp(lines[i], lines[j]) > 0) {
                char *temp = lines[i];
                lines[i] = lines[j];
                lines[j] = temp;
            }
        }
    }

    printf("\nSorted lines:\n");
    for (int i = 0; i < count; i++) {
        printf("%s", lines[i]);
        free(lines[i]);
    }

    return 0;
}
