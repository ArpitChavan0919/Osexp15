#include <stdio.h>
#define MAX_BLOCKS 10
#define MAX_PROCESSES 10

int main() {
    int blockSize[MAX_BLOCKS], processSize[MAX_PROCESSES];
    int n, m, i, j, allocation[MAX_PROCESSES];

    // Input: Number of blocks and processes
    printf("Enter the number of memory blocks: ");
    scanf("%d", &n);
    printf("Enter the number of processes: ");
    scanf("%d", &m);

    // Input: Block sizes
    printf("Enter the sizes of the memory blocks:\n");
    for (i = 0; i < n; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSize[i]);
    }

    // Input: Process sizes
    printf("Enter the sizes of the processes:\n");
    for (i = 0; i < m; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processSize[i]);
    }

    // Initialize allocation array (all processes unallocated)
    for (i = 0; i < m; i++) {
        allocation[i] = -1;
    }

    // First Fit algorithm
    for (i = 0; i < m; i++) {
        for (j = 0; j < n; j++) {
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                break;
            }
        }
    }

    // Output: Allocation results
    printf("\nProcess No.\tProcess Size\tBlock No.\n");
    for (i = 0; i < m; i++) {
        if (allocation[i] != -1)
            printf("%d\t\t%d\t\t%d\n", i + 1, processSize[i], allocation[i] + 1);
        else
            printf("%d\t\t%d\t\tNot Allocated\n", i + 1, processSize[i]);
    }

    return 0;
}

example o/p-
Enter the number of memory blocks: 5
Enter the number of processes: 4
Enter the sizes of the memory blocks:
Block 1: 100
Block 2: 500
Block 3: 200
Block 4: 300
Block 5: 600
Enter the sizes of the processes:
Process 1: 212
Process 2: 417
Process 3: 112
Process 4: 426

Process No.	Process Size	Block No.
1		212		2
2		417		5
3		112		1
4		426		Not Allocated
